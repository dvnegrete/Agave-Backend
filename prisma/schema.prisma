// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Eliminado modelo previo BankTransaction en favor de TransactionsBank

// =========================
// Nuevos modelos seg√∫n DB_First_Design.sql
// =========================

// Enums mapeados a tipos existentes en SQL
enum Role {
  ADMIN  @map("admin")
  OWNER  @map("owner")
  TENANT @map("tenant")

  @@map("role_t")
}

enum UserStatus {
  ACTIVE   @map("active")
  INACTIVE @map("inactive")
  SUSPEND  @map("suspend")

  @@map("status_t")
}

enum ValidationStatus {
  NOT_FOUND @map("not-found")
  PENDING   @map("pending")
  CONFIRMED @map("confirmed")

  @@map("validation_status_t")
}

model User {
  id           String     @id @db.Uuid
  role         Role       @default(TENANT)
  status       UserStatus @default(ACTIVE)
  name         String?    @db.VarChar(255)
  email        String?    @map("mail") @db.VarChar(255)
  celPhone     String?    @map("cel_phone")
  avatar       String?    @db.Text
  createdAt    DateTime?  @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @db.Timestamptz(6)
  lastLogin    DateTime?  @map("last_login") @db.Timestamptz(6)
  observations String?    @db.Text

  houses HousesUsers[]

  @@map("users")
}

model BalanceHistory {
  id                 Int @id @default(autoincrement())
  year               Int
  maintenanceBalance Int @map("maintenance_balance")

  houses House[] @relation("HouseBalanceHistory")

  @@map("balance_history")
}

model TransactionsBank {
  id                 BigInt    @id @default(autoincrement()) @db.BigInt
  date               DateTime  @db.Date
  time               String    @db.VarChar(16)
  concept            String?   @db.VarChar(225)
  amount             Float
  is_deposit         Boolean
  currency           String?   @db.VarChar(255)
  bankName           String?   @map("bank_name") @db.Text
  confirmationStatus Boolean   @default(false) @map("confirmation_status")
  createdAt          DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime? @db.Timestamptz(6)

  statuses         TransactionsStatus[]
  lastTransactions LastTransactionBank[]

  @@map("transactions_bank")
}

model Voucher {
  id                  Int      @id @default(autoincrement())
  date                DateTime @db.Timestamp(6)
  authorizationNumber String?  @map("authorization_number") @db.VarChar(255)
  amount              Float
  confirmationStatus  Boolean  @default(false) @map("confirmation_status")
  url                 String?  @db.Text

  statuses TransactionsStatus[]
  houses   House[]

  @@map("vouchers")
}

model TransactionsStatus {
  id                 Int              @id @default(autoincrement())
  validationStatus   ValidationStatus @default(PENDING) @map("validation_status")
  date               DateTime         @db.Timestamp(6)
  transactionsBankId BigInt?          @map("transactions_bank_id") @db.BigInt
  vouchersId         Int?             @map("vouchers_id")
  createdAt          DateTime?        @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime?        @db.Timestamptz(6)

  transactionsBank TransactionsBank? @relation(fields: [transactionsBankId], references: [id])
  voucher          Voucher?          @relation(fields: [vouchersId], references: [id])
  houses           House[]

  @@map("transactions_status")
}

model LastTransactionBank {
  id                 Int       @id @default(autoincrement())
  transactionsBankId BigInt?   @map("transactions_bank_id") @db.BigInt
  createdAt          DateTime? @default(now()) @db.Timestamptz(6)

  transactionsBank TransactionsBank? @relation(fields: [transactionsBankId], references: [id])

  @@map("last_transaction_bank")
}

model House {
  number              Int  @id @default(autoincrement())
  balancesId          Int? @map("balances_id")
  transactionStatusId Int? @map("transaction_status_id")
  vouchersId          Int? @map("vouchers_id")

  balanceHistory    BalanceHistory?     @relation("HouseBalanceHistory", fields: [balancesId], references: [id])
  transactionStatus TransactionsStatus? @relation(fields: [transactionStatusId], references: [id])
  voucher           Voucher?            @relation(fields: [vouchersId], references: [id])
  users             HousesUsers[]

  @@map("houses")
}

model HousesUsers {
  numberHouse Int       @map("number_house")
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime? @default(now()) @db.Timestamptz(6)
  updateAt    DateTime? @db.Timestamptz(6)

  house House @relation(fields: [numberHouse], references: [number])
  user  User  @relation(fields: [userId], references: [id])

  @@id([numberHouse, userId])
  @@map("houses_users")
}
